buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.7.RELEASE")
	}
}

apply plugin: 'java'
apply plugin: 'groovy'
//apply plugin: 'spring-boot'
apply plugin: 'ivy-publish'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'pmd'


// gradle SVN repository holds common scripts.
// apply from: 'https://source01.adtscore.net/bitbucket/projects/GRADLE/repos/scripts/browse/common.gradle?raw'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
	mavenLocal()
	mavenCentral()
}

sourceSets {
	main {
		java {
			srcDirs = ["src/main/java"] // no source dirs for the java compiler
		}
		groovy {
			srcDirs = ["src/main/java"] // compile everything in src with groovy
		}
	}

	test {
		java {
			srcDirs = ["src/test/java"]
		}
		groovy {
			srcDirs = ["src/test/java"]
		}
	}
}

configurations {

	all {
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	}
	//adding a configuration:
	compile {
		exclude group: 'javax.jms'
		exclude module: 'xercesImpl'
		exclude module: 'swiftmq'
	}
	
}

dependencies {
	compile 'org.codehaus.groovy:groovy-all:2.3.6'
	compile 'commons-lang:commons-lang:2.4'
	compile 'commons-net:commons-net:1.4.1'
	compile 'commons-codec:commons-codec:1.10'
	compile 'commons-cli:commons-cli:1.3.1'
	compile 'concurrent:concurrent:1.0'
	compile 'org.apache.commons:commons-vfs2:2.0'
	compile 'itext:itext:1.3.1'
	compile 'jdom:jdom:1.1'
	compile 'org.json:json:20180813'
	compile 'log4j:log4j:1.2.14'
	compile 'org.mongodb:mongo-java-driver:2.11.3'
	compile 'net.sf.saxon:Saxon-HE:9.4.0-9'
	compile group: 'javax.jms', name: 'jms', version: '1.1'
	compile 'javax.servlet:javax.servlet-api:4.0.1'
// https://mvnrepository.com/artifact/org.apache.activemq/activemq-all
	compile group: 'org.apache.activemq', name: 'activemq-all', version: '5.15.3'

	// Pull local versions thus:
	compile files('./libs/ojdbc6.jar')

	compile group: 'com.mchange', name: 'c3p0', version: '0.9.5.1'

	compile group: 'com.h2database', name: 'h2', version: '1.4.190'

	compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.11'

	compile group: 'org.postgresql', name: 'postgresql', version: '42.1.1'

	compile 'org.hibernate:hibernate-core:3.5.3-Final'
	compile 'org.hibernate:hibernate-annotations:3.5.3-Final'

	compile group: 'ch.ethz.ganymed', name: 'ganymed-ssh2', version: '262'

	implementation 'com.thoughtworks.xstream:xstream:1.4.8'

	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.0'

	// For file-based resolution.
//	compile files('./libs/adrXMLutil-1.0.1.jar')
//	compile files('./libs/ojdbc6.jar')

	// Once complete, revert to test repos with proper version:

//	compile ('fw3:sdmData:0.2.2-SNAPSHOT') {
//		exclude module: 'fw_common'
//	}
//	compile 'fw3:fw_common:1.3.53'
	//'fw3:mvr_utils:3.2.41'

//	compile ('fw3:mvr_utils:3.3.7-SNAPSHOT') {
//		exclude module: 'fw_common'
//		exclude module: "sdmData"
//	}

	compile 'javax.mail:mail:1.4'
	compile 'com.jcraft:jsch:0.1.31'
	compile 'com.jcraft:jzlib:1.1.3'
	compile 'org.spockframework:spock-core:0.7-groovy-2.0'
	compile "net.sf.supercsv:super-csv:2.2.0"
	runtime('hsqldb:hsqldb:1.8.0.5')

	// Java Netconf Client and SSH client dependency
	compile 'org.onosproject:jnc:1.0'
	compile 'ch.ethz.ganymed:ganymed-ssh2:262'

	testCompile 'junit:junit:4.10'
}

//sourceSets {
//	main {
//		java {
//			srcDirs = [] // no source dirs for the java compiler
//		}
//		groovy {
//			srcDirs = ["src/main/java"] // compile everything in src with groovy
//		}
//	}
//	test {
//		java {
//			srcDirs = []
//		}
//		groovy {
//			srcDirs = ["src/test/java"]
//		}
//	}
//}

task hello {
	doLast {
		println 'Hello world!'
	}
}

jar {
	manifest {
		attributes("Implementation-Title": "Gradle",
			"Implementation-Version": "${version}",
			'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
		)
	}
	// If you want to jar up source along with class files:  from sourceSets.main.java.srcDirs
	from sourceSets.main.output.classesDir
	
	// Note: anything in src/main/resources gets jar'd up by default!
	// We're non-standard here, so we have to manually get the spring config
	from ('src') {
		include "**/*.xml"
	}
}


task buildZip(type: Zip) {
	from ('src/conf') {
		into 'conf'
	}
	
	from ('properties') {
		into 'properties'
	}

	from ('scripts') {
		into 'scripts'
	}

	from ('docs') {
		into 'docs'
	}
	from (configurations.compile) {
		into 'lib'
		exclude "**/junit-*.jar"
		exclude "**/dbunit-*.jar"
		exclude "**/jmx*.jar"
		exclude "**/jaxb-*.jar"
		exclude "**/xercesImpl-*.jar"
	}

	from (jar) {
		into 'dist'
	}
}


task lastStep {
	doLast {
		String someString = 'mY_nAmE'
		println "Original: " + someString
		println "Upper case: " + someString.toUpperCase()
	}
}

task count(dependsOn: hello) {
	4.times { print "$it " }
}
